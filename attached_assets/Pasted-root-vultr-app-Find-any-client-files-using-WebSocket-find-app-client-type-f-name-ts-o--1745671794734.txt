root@vultr:/app# # Find any client files using WebSocket
find /app/client -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" | xargs grep -n "WebSocket" 2>/dev/null

# If you find files, edit them to replace WebSocket connections with fetch API calls
root@vultr:/app# # Create a WebSocket polyfill script
cat > /app/client/src/lib/websocket-polyfill.ts << 'EOF'
/**
 * WebSocket Polyfill - replaces WebSocket with HTTP fallback
 * Add this to your client code to fix WebSocket connection issues
 */

// Store the original WebSocket constructor
const OriginalWebSocket = window.WebSocket;

// Create a dummy WebSocket implementation that uses fetch
class FetchWebSocket {
  url: string;
  readyState: number = 0; // CONNECTING
  onopen: ((event: any) => void) | null = null;
  onclose: ((event: any) => void) | null = null;
  onmessage: ((event: any) => void) | null = null;
  onerror: ((event: any) => void) | null = null;

  static CONNECTING = 0;
  static OPEN = 1;
  static CLOSING = 2;
  static CLOSED = 3;

  constructor(url: string) {
    this.url = url;
    console.log(`[WebSocket Polyfill] Created connection to ${url}`);

    // Simulate connecting
    setTimeout(() => {
      this.readyState = 1; // OPEN
      if (this.onopen) {
        this.onopen({ target: this });
      }
    }, 100);
  }

  send(data: string): void {
    console.log(`[WebSocket Polyfill] Sending data via fetch`);

    try {
      // Parse the message to get the endpoint
      const message = JSON.parse(data);
      const apiEndpoint = `/api/${message.type || 'default'}`;
EOFort { FetchWebSocket, OriginalWebSocket };tationer) this.onclose = null; null;
root@vultr:/app# # Create a script to find the client entry file and add our polyfill
cat > /app/client/add-polyfill.sh << 'EOF'
#!/bin/bash

# Find the main client entry file
ENTRY_FILE=$(find /app/client/src -name "main.ts" -o -name "main.tsx" -o -name "index.ts" -o -name "index.tsx" | head -1)

if [ -z "$ENTRY_FILE" ]; then
  echo "Could not find client entry file. Please add the polyfill manually."
  exit 1
fi

echo "Found client entry file: $ENTRY_FILE"

# Add our polyfill import at the top of the file
TMP_FILE=$(mktemp)
echo "// WebSocket polyfill to fix connection issues" > $TMP_FILE
echo "import './lib/websocket-polyfill';" >> $TMP_FILE
cat $ENTRY_FILE >> $TMP_FILE
mv $TMP_FILE $ENTRY_FILE

echo "Added WebSocket polyfill import to $ENTRY_FILE"
EOF

# Make the script executable and run it
chmod +x /app/client/add-polyfill.sh
/app/client/add-polyfill.sh
Found client entry file: /app/client/src/main.tsx
Added WebSocket polyfill import to /app/client/src/main.tsx
root@vultr:/app# # Restart the application
pm2 restart url-manager

# Wait for it to start
sleep 5

# Test the API with curl
curl http://localhost/api/test-simple
Use --update-env to update environment variables
[PM2] Applying action restartProcessId on app [url-manager](ids: [ 2 ])
[PM2] [url-manager](2) ✓
┌────┬────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name           │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 1  │ simple-app     │ default     │ 1.0.0   │ fork    │ 22946    │ 11m    │ 0    │ online    │ 0%       │ 59.9mb   │ root     │ disabled │
│ 2  │ url-manager    │ default     │ 1.0.0   │ fork    │ 24726    │ 0s     │ 106  │ online    │ 0%       │ 4.0kb    │ root     │ disabled │
└────┴────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Error</title>
</head>
<body>
<pre>Cannot GET /api/test-simple</pre>
</body>
</html>
root@vultr:/app#
