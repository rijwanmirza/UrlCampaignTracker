deployer@vultr:/var/www/UrlCampaignTracker$ chmod +x start.sh
deployer@vultr:/var/www/UrlCampaignTracker$ ./start.sh
DATABASE_URL is set: postgresql...
NODE_ENV is set to: production
PORT is set to: 3000
🔍 DEBUG: Loaded saved config with autoDeleteMinutes: 2
🔍 DEBUG: Gmail reader initialized with autoDeleteMinutes: 2
1:59:32 PM [gmail-reader] Loaded 0 previously processed email IDs
1:59:32 PM [express] serving on port 5000
1:59:33 PM [gmail-reader] Error auto-configuring Gmail reader: [object Object]
^C





























^Z
[1]+  Stopped                 ./start.sh
deployer@vultr:/var/www/UrlCampaignTracker$ grep -n "port" /var/www/UrlCampaignTracker/server/index.ts
1:import express, { type Request, Response, NextFunction } from "express";
2:import { registerRoutes } from "./routes";
3:import { setupVite, serveStatic, log } from "./vite";
4:import compression from "compression";
5:import { gmailReader } from "./gmail-reader";
6:import { storage } from "./storage";
7:import * as spdy from 'spdy';
8:import * as fs from 'fs';
9:import * as path from 'path';
71:  // importantly only setup vite in development and after
80:  // ALWAYS serve the app on port 5000
82:  // It is the only port that is not firewalled.
83:  const port = 5000;
85:    port,
89:    log(`serving on port ${port}`);
102:        port: 993,
deployer@vultr:/var/www/UrlCampaignTracker$ grep -n "port" /var/www/UrlCampaignTracker/dist/index.js
6:var __export = (target, all) => {
12:var schema_exports = {};
13:__export(schema_exports, {
24:import { pgTable, text, serial, integer, timestamp, pgEnum, numeric } from "drizzle-orm/pg-core";
25:import { createInsertSchema } from "drizzle-zod";
26:import { z } from "zod";
58:      // Multiplier for URL click limits (supports decimals)
141:import { Pool, neonConfig } from "@neondatabase/serverless";
142:import { drizzle } from "drizzle-orm/neon-serverless";
143:import ws from "ws";
156:    db = drizzle({ client: pool, schema: schema_exports });
161:var decimal_multiplier_exports = {};
162:__export(decimal_multiplier_exports, {
165:import { sql as sql2 } from "drizzle-orm";
197:import express2 from "express";
200:import { createServer } from "http";
205:import { eq, and, desc, sql, inArray, ne, ilike, or } from "drizzle-orm";
817:import { z as z2 } from "zod";
818:import { fromZodError } from "zod-validation-error";
821:import Imap from "imap";
822:import { simpleParser } from "mailparser";
825:import express from "express";
826:import fs from "fs";
827:import path2 from "path";
828:import { createServer as createViteServer, createLogger } from "vite";
831:import { defineConfig } from "vite";
832:import react from "@vitejs/plugin-react";
833:import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
834:import path from "path";
835:import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
842:      await import("@replit/vite-plugin-cartographer").then(
849:      "@": path.resolve(import.meta.dirname, "client", "src"),
850:      "@shared": path.resolve(import.meta.dirname, "shared"),
851:      "@assets": path.resolve(import.meta.dirname, "attached_assets")
854:  root: path.resolve(import.meta.dirname, "client"),
856:    outDir: path.resolve(import.meta.dirname, "dist/public"),
862:import { nanoid } from "nanoid";
897:        import.meta.dirname,
916:  const distPath = path2.resolve(import.meta.dirname, "public");
929:import nodemailer from "nodemailer";
930:import smtpTransport from "nodemailer-smtp-transport";
931:import fs3 from "fs";
932:import path4 from "path";
935:import { google } from "googleapis";
936:import fs2 from "fs";
937:import path3 from "path";
1127:  port: 993,
1398:      port: this.config.port,
1456:      const transporter = nodemailer.createTransport(smtpTransport({
1458:        port: 465,
1471:      await transporter.verify();
2087:import Imap2 from "imap";
2559:          res.setHeader("Strict-Transport-Security", "max-age=31536000; includeSubDomains");
2660:          res.setHeader("Strict-Transport-Security", "max-age=31536000; includeSubDomains");
2705:    port: z2.number().int().positive().default(993),
2787:      const { user, password, host = "imap.gmail.com", port = 993, tls = true } = req.body;
2799:        port,
2820:        port,
2985:      const { updateMultiplierToDecimal: updateMultiplierToDecimal2 } = await Promise.resolve().then(() => (init_decimal_multiplier(), decimal_multiplier_exports));
3009:import compression from "compression";
3058:  const port = 5e3;
3060:    port,
3064:    log(`serving on port ${port}`);
3071:        port: 993,
deployer@vultr:/var/www/UrlCampaignTracker$ sudo nano /etc/nginx/sites-available/urltracker
deployer@vultr:/var/www/UrlCampaignTracker$ pm2 stop urltracker
pm2 delete urltracker
[PM2][ERROR] Process or Namespace urltracker not found
[PM2][ERROR] Process or Namespace urltracker not found
deployer@vultr:/var/www/UrlCampaignTracker$ pm2 start start.sh --name urltracker
[PM2] Starting /var/www/UrlCampaignTracker/start.sh in fork_mode (1 instance)
[PM2] Done.
┌────┬───────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name          │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼───────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 0  │ urltracker    │ default     │ 1.0.0   │ fork    │ 22191    │ 0s     │ 0    │ online    │ 0%       │ 504.0kb  │ deployer │ disabled │
└────┴───────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘
deployer@vultr:/var/www/UrlCampaignTracker$ pm2 status
┌────┬───────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name          │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼───────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 0  │ urltracker    │ default     │ 1.0.0   │ fork    │ 22227    │ 1s     │ 3    │ online    │ 0%       │ 3.5mb    │ deployer │ disabled │
└────┴───────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘
deployer@vultr:/var/www/UrlCampaignTracker$ sudo nginx -t
sudo systemctl restart nginx
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
deployer@vultr:/var/www/UrlCampaignTracker$ pm2 save
sudo pm2 startup
[PM2] Saving current process list...
[PM2] Successfully saved in /home/deployer/.pm2/dump.pm2

                        -------------

__/\\\\\\\\\\\\\____/\\\\____________/\\\\____/\\\\\\\\\_____
 _\/\\\/////////\\\_\/\\\\\\________/\\\\\\__/\\\///////\\\___
  _\/\\\_______\/\\\_\/\\\//\\\____/\\\//\\\_\///______\//\\\__
   _\/\\\\\\\\\\\\\/__\/\\\\///\\\/\\\/_\/\\\___________/\\\/___
    _\/\\\/////////____\/\\\__\///\\\/___\/\\\________/\\\//_____
     _\/\\\_____________\/\\\____\///_____\/\\\_____/\\\//________
      _\/\\\_____________\/\\\_____________\/\\\___/\\\/___________
       _\/\\\_____________\/\\\_____________\/\\\__/\\\\\\\\\\\\\\\_
        _\///______________\///______________\///__\///////////////__


                          Runtime Edition

        PM2 is a Production Process Manager for Node.js applications
                     with a built-in Load Balancer.

                Start and Daemonize any application:
                $ pm2 start app.js

                Load Balance 4 instances of api.js:
                $ pm2 start api.js -i 4

                Monitor in production:
                $ pm2 monitor

                Make pm2 auto-boot at server restart:
                $ pm2 startup

                To go further checkout:
                http://pm2.io/


                        -------------

[PM2] Init System found: systemd
Platform systemd
Template
[Unit]
Description=PM2 process manager
Documentation=https://pm2.keymetrics.io/
After=network.target

[Service]
Type=forking
User=root
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
Environment=PM2_HOME=/root/.pm2
PIDFile=/root/.pm2/pm2.pid
Restart=on-failure

ExecStart=/usr/lib/node_modules/pm2/bin/pm2 resurrect
ExecReload=/usr/lib/node_modules/pm2/bin/pm2 reload all
ExecStop=/usr/lib/node_modules/pm2/bin/pm2 kill

[Install]
WantedBy=multi-user.target

Target path
/etc/systemd/system/pm2-root.service
Command list
[ 'systemctl enable pm2-root' ]
[PM2] Writing init configuration in /etc/systemd/system/pm2-root.service
[PM2] Making script booting at startup...
[PM2] [-] Executing: systemctl enable pm2-root...
Created symlink /etc/systemd/system/multi-user.target.wants/pm2-root.service → /etc/systemd/system/pm2-root.service.
[PM2] [v] Command successfully executed.
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
$ pm2 save

[PM2] Remove init script via:
$ pm2 unstartup systemd
deployer@vultr:/var/www/UrlCampaignTracker$
