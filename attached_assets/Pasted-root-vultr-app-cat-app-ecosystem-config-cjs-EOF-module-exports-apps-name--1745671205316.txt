root@vultr:/app# cat > /app/ecosystem.config.cjs << 'EOF'
module.exports = {
  apps: [{
    name: "url-manager",
    script: "server/index.ts",
    interpreter: "node",
    interpreterArgs: "--import tsx",
    env: {
      NODE_ENV: "production",
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres",
      PORT: 5000
    }
  }]
}
EOF

# Apply the new configuration
pm2 delete url-manager
pm2 start /app/ecosystem.config.cjs
[PM2] Applying action deleteProcessId on app [url-manager](ids: [ 0 ])
[PM2] [url-manager](0) ✓
┌────┬───────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name          │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼───────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 1  │ simple-app    │ default     │ 1.0.0   │ fork    │ 22946    │ 42s    │ 0    │ online    │ 0%       │ 58.0mb   │ root     │ disabled │
└────┴───────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘
[PM2][WARN] Applications url-manager not running, starting...
[PM2] App [url-manager] launched (1 instances)
┌────┬────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name           │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 1  │ simple-app     │ default     │ 1.0.0   │ fork    │ 22946    │ 42s    │ 0    │ online    │ 0%       │ 58.3mb   │ root     │ disabled │
│ 2  │ url-manager    │ default     │ 1.0.0   │ fork    │ 22980    │ 0s     │ 0    │ online    │ 0%       │ 11.0mb   │ root     │ disabled │
└────┴────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘
root@vultr:/app# # Find and display the main server file
find /app/server -name "index.ts" -o -name "server.ts" | xargs cat
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import compression from "compression";
import cookieParser from "cookie-parser";
import { gmailReader } from "./gmail-reader";
import { storage } from "./storage";
import { initializeTrafficStar } from "./init-trafficstar";
import { trafficStarService } from "./trafficstar-service";
import { requireAuth } from "./auth/middleware";
import { registerAuthRoutes } from "./auth/routes";
import * as spdy from 'spdy';
import * as fs from 'fs';
import * as path from 'path';

const app = express();

// Enable compression for all responses
app.use(compression());

// High-performance JSON parsing with limits to prevent DoS attacks
app.use(express.json({ limit: '1mb' }));
app.use(express.urlencoded({ extended: false, limit: '1mb' }));

// Parse cookies for authentication
app.use(cookieParser());

// Add performance and caching headers for redirect URLs
app.use((req, res, next) => {
  // Set cache for campaign URLs
  if (req.path.startsWith('/c/') || req.path.startsWith('/r/')) {
    res.setHeader('X-Server-ID', 'high-perf-redirector-1');
    res.setHeader('Cache-Control', 'public, max-age=0');
  }
  next();
});

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  // Register authentication routes first
  registerAuthRoutes(app);

  // Apply authentication middleware to protect API routes
  app.use('/api', (req, res, next) => {
    // Skip auth for login/status routes and redirect routes
    if (req.path === '/auth/login' ||
        req.path === '/auth/verify' ||
        req.path === '/auth/status' ||
        req.path.startsWith('/campaigns/') && (req.method === 'GET' || req.method === 'OPTIONS') ||
        req.path.startsWith('/gmail-reader/') ||
        req.path.startsWith('/system/')) {
      return next();
    }

    // Apply authentication
    requireAuth(req, res, next);
  });

  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // It is the only port that is not firewalled.
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, async () => {
    log(`serving on port ${port}`);

    // Auto-configure and start Gmail reader with provided credentials
    try {
      // Check if there are campaigns but DON'T override defaultCampaignId
      // This prevents setting first campaign as default which could change user settings
      const campaigns = await storage.getCampaigns();

      // Configure Gmail reader with the credentials
      const gmailConfig = {
        user: 'compaignwalabhai@gmail.com',
        password: 'hciuemplthdkwfho',
        host: 'imap.gmail.com',
        port: 993,
        tls: true,
        tlsOptions: { rejectUnauthorized: false },
        whitelistSenders: ['help@donot-reply.in']
        // DO NOT set defaultCampaignId here - use existing config value instead
      };

      // Update Gmail reader configuration
      gmailReader.updateConfig(gmailConfig);

      // Try to verify the credentials
      try {
        const verifyResult = await gmailReader.verifyCredentials();
        if (verifyResult.success) {
          log(`Gmail credentials verified successfully, starting reader...`, 'gmail-reader');
          gmailReader.start();
          log(`Gmail reader started successfully and monitoring emails from help@donot-reply.in`, 'gmail-reader');
        } else {
          log(`Gmail verification failed: ${verifyResult.message}`, 'gmail-reader');
        }
      } catch (verifyError) {
        log(`Error verifying Gmail credentials: ${verifyError}`, 'gmail-reader');
      }

      // Initialize TrafficStar with API key from environment variable
      try {
        await initializeTrafficStar();
        log('TrafficStar API initialized successfully');

        // Start auto-management of TrafficStar campaigns
        try {
          await trafficStarService.scheduleAutoManagement();
          log('TrafficStar campaign auto-management initialized successfully');
        } catch (autoManageError) {
          log(`Error initializing TrafficStar auto-management: ${autoManageError}`);
        }
      } catch (trafficstarError) {
        log(`Error initializing TrafficStar API: ${trafficstarError}`);
      }
    } catch (error) {
      log(`Error auto-configuring integrations: ${error}`, 'startup');
    }
  });
})();
root@vultr:/app# # Create a fix for the server port and make sure it listens on 0.0.0.0 (not localhost)
cat > /app/fix-server.js << 'EOF'
// This is a fix for the server port configuration
// Find the server file that contains the app.listen() call and ensure it's listening on 0.0.0.0:5000

/*
// Change this:
app.listen(process.env.PORT || 3000, () => {
  console.log(`Server running on port ${process.env.PORT || 3000}`);
});

// To this:
app.listen(5000, '0.0.0.0', () => {
  console.log(`Server running on port 5000`);
});
*/
EOF

echo "The server fix is in /app/fix-server.js. Find your main server file and apply the fix."
The server fix is in /app/fix-server.js. Find your main server file and apply the fix.
root@vultr:/app# # Update nginx configuration to include proper websocket handling
cat > /etc/nginx/sites-available/url-manager << 'EOF'
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    # Root path - proxy to your app
    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
    }
}
EOF

nginx -t && systemctl restart nginx
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
root@vultr:/app#
