import express from 'express';
import { storage } from '../storage';
import { authSchema, tokenResponseSchema } from '@shared/schema';
import { createHash } from 'crypto';
import passport from 'passport';
import { Strategy as LocalStrategy } from 'passport-local';

const router = express.Router();

// Set up Passport local strategy for admin login
passport.use(new LocalStrategy(
  async (username, password, done) => {
    try {
      if (username === 'admin') {
        const adminUser = await storage.getUserByUsername('admin');
        
        if (!adminUser) {
          // Create admin user with hashed password if it doesn't exist
          await storage.createUser({
            username: 'admin',
            password: hashPassword('admin')
          });
          console.log('Admin user created successfully');
          return done(null, { username: 'admin' });
        }
        
        // Verify password
        const hashedPassword = hashPassword(password);
        if (hashedPassword === adminUser.password) {
          return done(null, { username: 'admin' });
        }
      }
      
      // Authentication failed
      return done(null, false, { message: 'Invalid username or password' });
    } catch (error) {
      return done(error);
    }
  }
));

// Helper to hash passwords
const hashPassword = (password: string): string => {
  return createHash('sha256').update(password).digest('hex');
};

// OAuth token acquisition route
router.post('/', async (req, res) => {
  try {
    const { apiKey } = req.body;
    
    // Validate input
    const validation = authSchema.safeParse({ apiKey });
    if (!validation.success) {
      return res.status(400).json({ 
        message: 'Invalid API key format',
        errors: validation.error.errors
      });
    }
    
    try {
      // Request access token using the API key as the refresh token (according to TrafficStars OAuth 2.0 flow)
      const response = await fetch('https://api.trafficstars.com/v1/auth/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json'
        },
        body: new URLSearchParams({
          'grant_type': 'refresh_token',
          'refresh_token': apiKey
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('TrafficStars OAuth failed:', response.status, errorText);
        return res.status(401).json({ message: 'Invalid TrafficStars API key' });
      }
      
      const tokenData = await response.json();
      
      // Validate token response
      const validation = tokenResponseSchema.safeParse(tokenData);
      if (!validation.success) {
        console.error('Invalid token response format:', validation.error.errors);
        return res.status(500).json({ message: 'Invalid token response from TrafficStars API' });
      }
      
      // Store a record in user DB if needed for tracking purposes
      try {
        const existingUser = await storage.getUserByUsername(apiKey.substring(0, 30));
        if (!existingUser) {
          await storage.createUser({
            username: apiKey.substring(0, 30), // Use truncated API key as username
            password: 'token_auth_user' // Placeholder
          });
        }
      } catch (dbError) {
        console.warn('Error storing user record:', dbError);
        // Continue even if DB storage fails - auth was successful
      }
      
      // Return the token data to the client
      return res.status(200).json(tokenData);
    } catch (error) {
      console.error('Error acquiring TrafficStars token:', error);
      return res.status(500).json({ message: 'Failed to acquire token from TrafficStars API' });
    }
  } catch (error) {
    console.error('Authentication error:', error);
    return res.status(500).json({ message: 'Internal server error' });
  }
});

// Token refresh route - reuses same logic as initial token acquisition
router.post('/refresh', async (req, res) => {
  try {
    const { refreshToken } = req.body;
    
    if (!refreshToken) {
      return res.status(400).json({ message: 'Refresh token is required' });
    }
    
    try {
      // Request new access token using the refresh token (API key)
      const response = await fetch('https://api.trafficstars.com/v1/auth/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json'
        },
        body: new URLSearchParams({
          'grant_type': 'refresh_token',
          'refresh_token': refreshToken
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('TrafficStars token refresh failed:', response.status, errorText);
        return res.status(401).json({ message: 'Invalid refresh token' });
      }
      
      const tokenData = await response.json();
      
      // Validate token response
      const validation = tokenResponseSchema.safeParse(tokenData);
      if (!validation.success) {
        console.error('Invalid token response format:', validation.error.errors);
        return res.status(500).json({ message: 'Invalid token response from TrafficStars API' });
      }
      
      // Return the refreshed token data to the client
      return res.status(200).json(tokenData);
    } catch (error) {
      console.error('Error refreshing TrafficStars token:', error);
      return res.status(500).json({ message: 'Failed to refresh token from TrafficStars API' });
    }
  } catch (error) {
    console.error('Token refresh error:', error);
    return res.status(500).json({ message: 'Internal server error' });
  }
});

// Session info endpoint - for getting info about current session
router.get('/info', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Valid Bearer token is required' });
    }
    
    const token = authHeader.split(' ')[1];
    
    try {
      // Call TrafficStars session info endpoint
      const response = await fetch('https://api.trafficstars.com/v1/auth/info', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        return res.status(response.status).json({ message: 'Failed to get session information' });
      }
      
      const sessionData = await response.json();
      return res.status(200).json(sessionData);
    } catch (error) {
      console.error('Error getting session info:', error);
      return res.status(500).json({ message: 'Failed to get session information from TrafficStars API' });
    }
  } catch (error) {
    console.error('Session info error:', error);
    return res.status(500).json({ message: 'Internal server error' });
  }
});

// Logout endpoint
router.post('/logout', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Valid Bearer token is required' });
    }
    
    const token = authHeader.split(' ')[1];
    
    try {
      // Call TrafficStars logout endpoint
      const response = await fetch('https://api.trafficstars.com/v1/auth/logout', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });
      
      if (!response.ok) {
        return res.status(response.status).json({ message: 'Failed to logout' });
      }
      
      return res.status(204).end();
    } catch (error) {
      console.error('Error logging out:', error);
      return res.status(500).json({ message: 'Failed to logout from TrafficStars API' });
    }
  } catch (error) {
    console.error('Logout error:', error);
    return res.status(500).json({ message: 'Internal server error' });
  }
});

// Admin login endpoint using Passport
router.post('/admin', (req, res, next) => {
  passport.authenticate('local', (err: Error | null, user: any, info: { message: string } | undefined) => {
    if (err) {
      console.error('Admin login error:', err);
      return res.status(500).json({ message: 'Internal server error' });
    }
    
    if (!user) {
      return res.status(401).json({ message: info?.message || 'Invalid username or password' });
    }
    
    // Log the user in (establish session)
    req.logIn(user, (err: Error | null) => {
      if (err) {
        console.error('Session login error:', err);
        return res.status(500).json({ message: 'Failed to establish session' });
      }
      
      // Create token response for frontend
      const tokenResponse = {
        access_token: `admin_session_${Date.now()}`,
        expires_in: 86400, // 24 hours in seconds
        token_type: 'Bearer',
        id_token: 'admin_session'
      };
      
      // Return success with token data
      return res.status(200).json(tokenResponse);
    });
  })(req, res, next);
});

export const authRouter = router;
